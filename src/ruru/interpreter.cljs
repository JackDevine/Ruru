(ns ruru.interpreter)

(def interpreter-edn
  {:cell-order
   [#uuid "ea69ed9a-e8a6-4788-825b-1164cde94aea" #uuid "a3bd0840-c7c1-4698-a065-3e2f185799d9" #uuid "c47a9e2e-5c6d-4d4f-8bb9-769618d477f2" #uuid "153bac52-5045-463a-bdfb-7ea0df7c2d1d" #uuid "d919d556-d877-421b-b4a8-427ed2d78747" #uuid "41ae2093-72fe-4c3d-816d-ac9a6a2f65b3" #uuid "c45c112f-6828-441d-8a03-938c8f9c5291" #uuid "5f59cb66-dd7e-45cb-b6a2-1255fcc0ecb4" #uuid "20f50fcd-e967-4631-a391-20f05b83fab3" #uuid "428a23b9-8def-4e48-822d-cd26edfbd2ff" #uuid "82c526a1-7cb6-4c38-afb9-3547417b9356" #uuid "cb525fff-580b-4fc1-954d-c714c9eeaa65"]
   :cells
   {#uuid "d919d556-d877-421b-b4a8-427ed2d78747" {:val "[['div,\n  ['h2,\"Remove whitespace\"],\n  ['p,\"Whitespace is useful for separating tokens and making your program\n       human readable.\"],\n  ['p,\"However, whitespace does not play any role in the evaluation\n       of the program, so now that the tokens are known, we can remove the whitespace.\"]]Html,\n  program,\n  p_remove_whitespace\n]Show_array", :show-code false}
    #uuid "20f50fcd-e967-4631-a391-20f05b83fab3" {:val "[['div,['h2,\"Get assignment\"],\n  ['p,\"The := assignment operator has its own syntax where the result of the expression\n       to the right of := is assigned to the variable name on the left.\"]]Html,\n  program,\n  p_get_assignment Get_value]Show_array", :show-code false}
    #uuid "153bac52-5045-463a-bdfb-7ea0df7c2d1d" {:val "[['div,['h2,\"Map metadata onto tokens\"],\n  ['p,\"There is a list of rules that dictate whether a token\n       is a function, variable or a comment.\"],\n  ['p,\"Both the syntax highlighting system and the evaluator use this\n       extra meta data to interpret a program.\"],\n  ['p,\"From now on, we will only work with the first expression in your program,\n       so if your program has multiple lines, then only the first line will be considered.\n       Later on, we will show how multiple expressions can be handled using the 'reduce' function.\"]]Html,\n  program,p_tokenize]Show_array", :show-code false}
    #uuid "5f59cb66-dd7e-45cb-b6a2-1255fcc0ecb4" {:val "[['div,['h2,\"Bind quotes\"],\n  ['p,\"A quote mark (') is used in ruru to indicate\n       that a name should be treated as a symbol.\n       The bind_quotes function indicates that a variable has been quoted by changing the token meta data.\n       Specifically, the role of the token is changed to 'quoted'.\"],\n  ['p,\"Try entering:\"],\n  ['pre,\n\"'quoted_variable\"]]Html,\n  program,\n  p_bind_quotes]Show_array", :show-code false}
    #uuid "ea69ed9a-e8a6-4788-825b-1164cde94aea" {:val "'p Shared_input[\"variable := 2+3  % Assign the value 5 to variable\",0-1] => program\n\nprogram@'value Expression_list => p_expression_list\n  Run_reader_macros environment => p_run_reader_macros\n  Tokenize => p_tokenize\n  Remove_whitespace => p_remove_whitespace\n  Bind_strands => p_bind_strands\n  Nest_parens => p_nest_parens\n  Bind_quotes => p_bind_quotes\n  Get_assignment => p_get_assignment\n  Assignment_and_ast => p_assignment_and_ast\n  Eval environment => p_eval\n\n[['div,['h2,\"Interactive interpreter demo\"],\n  ['p,\"This page will let you modify a ruru program and inspect its value at each stage of the interpreter pipeline\"]]Html,\n  program,\n  p_eval,\n  ['p,\"Use the previous and next buttons to navigate the tutorial and press the Esc key to see the source code\n       for this tutorial.\"]Html]Show_array\n", :show-code false}
    #uuid "41ae2093-72fe-4c3d-816d-ac9a6a2f65b3" {:val "[['div,['h2,\"Bind strands\"],\n  ['p,\"A strand '‿' joins elements into a list and has its own\n       syntactic role. Strands can be entered by typing backslash, then space.\"],\n  ['p,\"Try entering 1‿2‿3\"]]Html,\n  program,\n  p_bind_strands]Show_array", :show-code false}
    #uuid "c45c112f-6828-441d-8a03-938c8f9c5291" {:val "[['div,['h2,\"Nest parentheses\"],\n  ['p,\"There are three types of valid parentheses in ruru: (), [] and {}.\"],\n  ['p,\"For clarity, we omit the meta data associated with each token,\n       however, ruru will still keep track of the meta data.\"],\n  ['p,\"Try entering:\"],\n  ['pre,\n\"1+(2-(3*4))\"]]Html,\n  program,\n  p_nest_parens Get_value Get_value Get_value Get_value]Show_array", :show-code false}
    #uuid "428a23b9-8def-4e48-822d-cd26edfbd2ff" {:val "[['div,\n  ['h2,\"Abstract Syntax Tree (AST)\"],\n  ['p,\"The AST of a program is the data structure that the evaluator works with.\n       Nested subexpressions are represented by nested arrays in the AST.\"]]Html,\n  program,\n  p_assignment_and_ast Get_value Criss_cross]Show_array", :show-code false}
    #uuid "c47a9e2e-5c6d-4d4f-8bb9-769618d477f2" {:val "[['div,\n  ['h2,\"Remove comments\"],\n  ['p,\"The comments (text after the %) do not play any role in the program evaluation, so\n       we need to remove them from the program.\"]]Html,\n  program,\n  p_run_reader_macros Show_array]Show_array", :show-code false}
    #uuid "82c526a1-7cb6-4c38-afb9-3547417b9356" {:val "[['div,\n ['h2,\"Result\"],\n ['p,\"Once the AST has been calculated, we can evaluate the program by applying the\n      first element of each list to the remainder of the list (the function arguments).\"],\n ['p,\"Try these programs:\"],\n ['pre,\n\"1:10Filter is_even\n  Map square\n  Sum\"],\n ['pre,\n\"2+2 Sqrt\"],\n ['pre,\n\"1‿2‿3\"],\n ['pre,\n\"1:20Reshape 4‿5\"],\n ['pre,\n\"1:100Map inverse_square Sum -(pi Square/6)\"]]Html,\n  program,\n  p_assignment_and_ast Get_value Criss_cross,\n  ['span,\"Evaluated AST\"]Html,\n  p_eval]Show_array", :show-code false}
    #uuid "a3bd0840-c7c1-4698-a065-3e2f185799d9" {:val "[['div,['h2,\"Expression tokens\"],\n  ['p,\"First, the interpreter will break the program into a list of expressions made up of 'tokens'.\n   Try adding new lines to the program and notice how each new line (expression) is stored in its\n   own array.\"]]Html,\n  program,p_expression_list T]Show_array", :show-code false}
    #uuid "cb525fff-580b-4fc1-954d-c714c9eeaa65" {:val "% Define a ruru interpreter in ruru.\n%{\nWe can now combine the functions explained so far to\nmake a working ruru interpreter. \n}%\n\n%{\nEvaluate an expression x in environment y.\nReturn a 2 element list with the result and the new\nenvironemnt. If there are any assignments in the expression\nthen the returned environment will contain the results of\nthose assignments. \n}%\neval_exp:={\nx\n  Run_reader_macros y\n  Tokenize\n  Remove_whitespace\n  Bind_strands\n  Nest_parens\n  Bind_quotes\n  Get_assignment\n  Assignment_and_ast\n  Eval_env y}\n\n%{\nInterpret program x in environment y.\nReturn the result of the last expression in the program\nand the modified version of the environment.\n}%\ninterpret:={\nx Expression_list\n  Reduce[{[y]Eval_exp(x@2)},[[],y]]\n}\n\n'q Shared_input[\"x:=1+2\nx+2  % Edit code here\",0-1] => demo\n\n[['h3,\"Ruru interpreter defined in ruru\"]Html,\n demo,\n demo@'value Interpret environment@1,\n ['div,['style,[\"padding-bottom\",\"500px\"]#]#,\"\"]Html]Show_array", :show-code true}}})
